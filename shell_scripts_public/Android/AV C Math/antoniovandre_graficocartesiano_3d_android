#!/bin/bash

# ____________________

# Proprietário Antonio Vandré Pedrosa Furtunato Gomes.

# Projeto Mathematical Ramblings.

# ____________________

# Visualizador de gráficos 3D, para Android.

# Requer "antoniovandre_eval_android", Gnuplot, ImageMagick e FFmpeg.

# ____________________

# Primeiro argumento: funções em VARIAVEL e VARIAVEL2 (veja quais são abaixo), separadas por DELIMITADOR;

# Segundo argumento: o menor valor atribuído a VARIAVEL, se omitido "-1";

# Terceiro argumento: o maior valor atribuído a VARIAVEL, se omitido "1";

# Quarto argumento: o menor valor atribuído a VARIAVEL2, se omitido "-1";

# Quinto argumento: o maior valor atribuído a VARIAVEL2, se omitido "1";

# Sexto argumento: o menor valor para a imagem, se omitido "-1";

# Sétimo argumento: o maior valor para a imagem, se omitido "1";

# Oitavo argumento: a rotação x, se omitido "0";

# Nono argumento: a rotação y, se omitido "0";

# Décimo argumento: a rotação z, se omitido "0";

# Décimo-primeiro argumento: a translação x, se omitido "0";

# Décimo-segundo: a translação y, se omitido "0";

# Décimo-terceiro: a translação z, se omitido "0";

# Décimo-quarto argumento: a resolução do gráfico, se omitido "100";

# Décimo-quinto: a resolução de rotação, se omitido "6";

# Décimo-sexto: o tempo de refresh, se omitido "1";

# Décimo-sétimo argumento: a escala, em porcentagem, dos outputs, se omitido "100".

# ____________________

# A rotação é aplicada antes da translação.

# ____________________

# Licença: Atribuição-NãoComercial-CompartilhaIgual (CC BY-NC-SA).

# ____________________

# Última atualização: 11-06-2024. Com exceção das variáveis globais.

if ! [ -n "$AVENV" ]; then echo -ne "Carregando variáveis de ambiente... "; if ! source "${HOME}/storage/shared/av_softwares/BASH scripts/antoniovandre_env_android" &>> /dev/null; then echo -e "Ocorreu um erro.\n"; else echo -e "${AV_VERDE}Ok${AV_SEMCOR}.\n"; fi; fi

ARQUIVODAT="${TEMPDIR}avgc3d.dat"

DIRETORIOARQUIVOSGRAFICO="${TEMPDIR}"

PREFIXOARQUIVOSGRAFICO="avgc3d"

AVGCBACKGROUND="${BASHSCRIPTSDIR}avgcbackground.png"

ARQUIVOTEMP="${TEMPDIR}avgc3dtf"

AVANDROIDVERSIONMIN="20240607"

if ! [ -n "$AVCORES" ]; then echo -ne "Carregando antoniovandre_cores... "; if ! source "${BASHSCRIPTSDIR}antoniovandre_cores" &>> /dev/null; then echo -e "Ocorreu um erro.\n"; else echo -e "${AV_VERDE}Ok${AV_SEMCOR}.\n"; fi; fi

if ! hash gnuplot &>> /dev/null; then echo -e "${AV_VERMELHO}Software \"Gnuplot\" não encontrado${AV_SEMCOR}."; exit 1; fi

GNUPLOTVERSION=$(TEMP=$(gnuplot -V | cut -d " " -f 2); TEMP=$(echo "${TEMP} * 10" | bc); echo -n "${TEMP%.*}")

GNUPLOTPATCHLEVEL=$(TEMP=$(gnuplot -V | cut -d " " -f 3); if [ "${TEMP}" == "patchlevel" ]; then TEMP=$(gnuplot -V | cut -d " " -f 4); echo -n "${TEMP}"; else echo -n "0"; fi)

GNUPLOTGDPNG=$(gnuplot -e "show version long" &>> "${ARQUIVOTEMP}"; cat "${ARQUIVOTEMP}" | tr -d "\n" | grep "+GD_PNG")

if ! hash antoniovandre_eval_android &>> /dev/null; then echo -e "${AV_VERMELHO}Software \"antoniovandre_eval_android\" não encontrado${AV_SEMCOR}."; exit 1; fi

TEMP=$(antoniovandre_eval_android "system version" "0" | tr -d "\n")

if [ "${TEMP%.*}" -lt "${AVANDROIDVERSIONMIN}" ]; then echo -e "${AV_VERMELHO}Requer \"antoniovandre_android\" superior ou igual a ${AVANDROIDVERSIONMIN}${AV_SEMCOR}."; exit 1; fi

if ! hash convert &>> /dev/null; then echo -e "${AV_VERMELHO}Software \"convert\" não encontrado${AV_SEMCOR}."; exit 1; fi

if ! hash ffmpeg &>> /dev/null; then echo -e "${AV_VERMELHO}Software \"ffmpeg\" não encontrado${AV_SEMCOR}."; exit 1; fi

VARIAVEL=$(TEMP=$(antoniovandre_eval_android "system variaveldesubstituicao" "0" | tr -d "\n"); echo -ne \\x$(printf %02x ${TEMP%.*}))

VARIAVEL2=$(TEMP=$(antoniovandre_eval_android "system variaveldesubstituicao2" "0" | tr -d "\n"); echo -ne \\x$(printf %02x ${TEMP%.*}))

BARRA="1" # "1" para habilitar, consome muito processamento.

TAMBARRAPROGRESSO="30"

BARRAPROGRESSOCHAR0="-"

BARRAPROGRESSOCHAR1="#"

STEP=$(TEMP=$(antoniovandre_eval_android "system intervaloprogresso3" "0" | tr -d "\n"); echo -n ${TEMP%.*})

DELIMITADOR=$(TEMP=$(antoniovandre_eval_android "system delimitadorstring" "0" | tr -d "\n"); echo -ne \\x$(printf %02x ${TEMP%.*}))

TOKENINICIOEVAL=$(TEMP=$(antoniovandre_eval_android "system tokeninicioeval" "0" | tr -d "\n"); echo -ne \\x$(printf %02x ${TEMP%.*}))

TOKENFIMEVAL=$(TEMP=$(antoniovandre_eval_android "system tokenfimeval" "0" | tr -d "\n"); echo -ne \\x$(printf %02x ${TEMP%.*}))

MAXVALUE=$(antoniovandre_eval_android "system valor_max" "0" | tr -d "\n")

if [ "${#}" -lt "1" ] || ([ "${#}" == "1" ] && ([ "${1}" == "h" ] || [ "${1}" == "help" ] || [ "${1}" == "ajuda" ])); then echo -e "Primeiro argumento: funções em \"${VARIAVEL}\" e \"${VARIAVEL2}\" (veja quais são abaixo), separadas por \"${DELIMITADOR}\";\n\nSegundo argumento: o menor valor atribuído a \"${VARIAVEL}\", se omitido \"-1\";\n\nTerceiro argumento: o maior valor atribuído a \"${VARIAVEL}\", se omitido \"1\";\n\nQuarto argumento: o menor valor atribuído a \"${VARIAVEL2}\", se omitido \"-1\";\n\nQuinto argumento: o maior valor atribuído a \"${VARIAVEL2}\", se omitido \"1\";\n\nSexto argumento: o menor valor para a imagem, se omitido \"-1\";\n\nSétimo argumento: o maior valor para a imagem, se omitido \"1\";\n\nOitavo argumento: a rotação x, se omitido \"0\";\n\nNono argumento: a rotação y, se omitido \"0\";\n\nDécimo argumento: a rotação z, se omitido \"0\";\n\nDécimo-primeiro argumento: a translação x, se omitido \"0\";\n\nDécimo-segundo: a translação y, se omitido \"0\";\n\nDécimo-terceiro: a translação z, se omitido \"0\";\n\nDécimo-quarto argumento: a resolução do gráfico, se omitido \"100\";\n\nDécimo-quinto: a resolução de rotação, se omitido \"6\";\n\nDécimo-sexto: o tempo de refresh, se omitido \"1\";\n\nDécimo-sétimo argumento: a escala, em porcentagem, dos outputs, se omitido \"100\"."; exit 0; fi

FUNCOES="${1}"

MIN=$(if ! [ -z "${2}" ]; then antoniovandre_eval_android "${2}" "0" | tr -d "\n"; else echo -n "-1"; fi)

MAX=$(if ! [ -z "${3}" ]; then antoniovandre_eval_android "${3}" "0" | tr -d "\n"; else echo -n "1"; fi)

MINY=$(if ! [ -z "${4}" ]; then antoniovandre_eval_android "${4}" "0" | tr -d "\n"; else echo -n "-1"; fi)

MAXY=$(if ! [ -z "${5}" ]; then antoniovandre_eval_android "${5}" "0" | tr -d "\n"; else echo -n "1"; fi)

MINZ=$(if ! [ -z "${6}" ]; then antoniovandre_eval_android "${6}" "0" | tr -d "\n"; else echo -n "-1"; fi)

MAXZ=$(if ! [ -z "${7}" ]; then antoniovandre_eval_android "${7}" "0" | tr -d "\n"; else echo -n "1"; fi)

ROTX=$(if ! [ -z "${8}" ]; then antoniovandre_eval_android "${8}" "0" | tr -d "\n"; else echo -n "0"; fi)

ROTY=$(if ! [ -z "${9}" ]; then antoniovandre_eval_android "${9}" "0"; else echo -n "0"; fi)

ROTZ=$(if ! [ -z "${10}" ]; then antoniovandre_eval_android "${10}" "0"; else echo -n "0"; fi)

TRANSX=$(if ! [ -z "${11}" ]; then antoniovandre_eval_android "${11}" "0"; else echo -n "0"; fi)

TRANSY=$(if ! [ -z "${12}" ]; then antoniovandre_eval_android "${12}" "0"; else echo -n "0"; fi)

TRANSZ=$(if ! [ -z "${13}" ]; then antoniovandre_eval_android "${13}" "0"; else echo -n "0"; fi)

RESOLUCAO=$(if ! [ -z "${14}" ]; then echo -n "${14}"; else echo -n "100"; fi)

RESOLUCAOANGULO=$(if ! [ -z "${15}" ]; then echo -n "${15}"; else echo -n "12"; fi)

TEMPOREFRESH=$(if ! [ -z "${16}" ]; then echo -n "${16}"; else echo -n "1"; fi)

ESCALA=$(if ! [ -z "${17}" ]; then echo -n "${17}"; else echo -n "100"; fi)

NUMEROFUNCOES=$(CONTADOR="1"; for I in `seq 0 $(expr $(echo -n "${FUNCOES}" | wc -c | tr -d "\n") - 1)`; do if [ "${FUNCOES:${I}:1}" == "${DELIMITADOR}" ]; then CONTADOR=$(expr "${CONTADOR}" + 1); fi; done; echo -n "${CONTADOR}")

MAXIMOVALOR="-${MAXVALUE}"

MINIMOVALOR="${MAXVALUE}"

TEMP=$(antoniovandre_eval_android "(${MAX}) - (${MIN})" "0" | tr -d "\n"); if [ "${TEMP:0:1}" == "-" ]; then echo -e "${AV_VERMELHO}Valor máximo menor que o valor mínimo${AV_SEMCOR}."; exit 1; fi

if ! [[ "${RESOLUCAO}" =~ ^[0-9]+$ ]]; then echo -e "${AV_VERMELHO}Valor inválido para a resolução${AV_SEMCOR}."; exit 1; fi

if ! [[ "${RESOLUCAOANGULO}" =~ ^[0-9]+$ ]]; then echo -e "${AV_VERMELHO}Valor inválido para a resolução dos ângulos de visão${AV_SEMCOR}."; exit 1; fi

echo -n "" > "${ARQUIVODAT}"

echo "Construindo arquivo dat...";

CHARPROGRESS=""

if hash tput &>> /dev/null; then tput civis; fi

for L in `seq 1 "${NUMEROFUNCOES}"`; do
for I in `seq 1 "${RESOLUCAO}"`; do
X=$(antoniovandre_eval_android "${TOKENINICIOEVAL}${MIN}${TOKENFIMEVAL} + ${TOKENINICIOEVAL}${I}${TOKENFIMEVAL} * ${TOKENINICIOEVAL}${TOKENINICIOEVAL}${MAX}${TOKENFIMEVAL} - ${TOKENINICIOEVAL}${MIN}${TOKENFIMEVAL}${TOKENFIMEVAL} / ${TOKENINICIOEVAL}${RESOLUCAO}${TOKENFIMEVAL}" "0" | tr -d "\n")

for J in `seq 1 "${RESOLUCAO}"`; do
Y=$(antoniovandre_eval_android "${TOKENINICIOEVAL}${MINY}${TOKENFIMEVAL} + ${TOKENINICIOEVAL}${J}${TOKENFIMEVAL} * ${TOKENINICIOEVAL}${TOKENINICIOEVAL}${MAXY}${TOKENFIMEVAL} - ${TOKENINICIOEVAL}${MINY}${TOKENFIMEVAL}${TOKENFIMEVAL} / ${TOKENINICIOEVAL}${RESOLUCAO}${TOKENFIMEVAL}" "0" | tr -d "\n")

TEMP=$(echo -n "${FUNCOES}" | cut -d ${DELIMITADOR} -f ${L} | sed "s/${VARIAVEL}/${TOKENINICIOEVAL}${X}${TOKENFIMEVAL}/g" | sed "s/${VARIAVEL2}/${TOKENINICIOEVAL}${Y}${TOKENFIMEVAL}/g" | tr -d "\n")

Z=$(antoniovandre_eval_android "${TEMP}" "0" | tr -d "\n")

if [[ "${Z}" =~ ^[+-]?[0-9]+([.][0-9]+)?$ ]]; then TEMPX=$X; TEMPY=$Y; TEMPZ=$Z;Y=$(antoniovandre_eval_android "${TOKENINICIOEVAL}${TEMPY}${TOKENFIMEVAL} * cos${TOKENINICIOEVAL}${ROTX}${TOKENFIMEVAL} + ${TOKENINICIOEVAL}${TEMPZ}${TOKENFIMEVAL} * sen${TOKENINICIOEVAL}${ROTX}${TOKENFIMEVAL}" "0" | tr -d "\n"); Z=$(antoniovandre_eval_android "-${TOKENINICIOEVAL}${TEMPY}${TOKENFIMEVAL} * sen${TOKENINICIOEVAL}${ROTX}${TOKENFIMEVAL} + ${TOKENINICIOEVAL}${TEMPZ}${TOKENFIMEVAL} * cos${TOKENINICIOEVAL}${ROTX}${TOKENFIMEVAL}" "0" | tr -d "\n"); X=$(antoniovandre_eval_android "${TOKENINICIOEVAL}${TEMPX}${TOKENFIMEVAL} * cos${TOKENINICIOEVAL}${ROTY}${TOKENFIMEVAL} - ${TOKENINICIOEVAL}${TEMPZ}${TOKENFIMEVAL} * sen${TOKENINICIOEVAL}${ROTY}${TOKENFIMEVAL}" "0" | tr -d "\n"); TEMPX=$X; TEMPY=$Y; TEMPZ=$Z; Z=$(antoniovandre_eval_android "${TOKENINICIOEVAL}${TEMPX}${TOKENFIMEVAL} * sen${TOKENINICIOEVAL}${ROTY}${TOKENFIMEVAL} + ${TOKENINICIOEVAL}${TEMPZ}${TOKENFIMEVAL} * cos${TOKENINICIOEVAL}${ROTY}${TOKENFIMEVAL}" "0" | tr -d "\n"); X=$(antoniovandre_eval_android "${TOKENINICIOEVAL}${TEMPX}${TOKENFIMEVAL} * cos${TOKENINICIOEVAL}${ROTZ}${TOKENFIMEVAL} + ${TOKENINICIOEVAL}${TEMPY}${TOKENFIMEVAL} * sen${TOKENINICIOEVAL}${ROTZ}${TOKENFIMEVAL}" "0" | tr -d "\n"); Y=$(antoniovandre_eval_android "-${TOKENINICIOEVAL}${TEMPX}${TOKENFIMEVAL} * sen${TOKENINICIOEVAL}${ROTZ}${TOKENFIMEVAL} + ${TOKENINICIOEVAL}${TEMPY}${TOKENFIMEVAL} * cos${TOKENINICIOEVAL}${ROTZ}${TOKENFIMEVAL}" "0" | tr -d "\n"); TEMPX=$X; TEMPY=$Y; TEMPZ=$Z; X=$(antoniovandre_eval_android "${TOKENINICIOEVAL}${TEMPX}${TOKENFIMEVAL} + ${TOKENINICIOEVAL}${TRANSX}${TOKENFIMEVAL}" "0" | tr -d "\n"); Y=$(antoniovandre_eval_android "${TOKENINICIOEVAL}${TEMPY}${TOKENFIMEVAL} + ${TOKENINICIOEVAL}${TRANSY}${TOKENFIMEVAL}" "0" | tr -d "\n"); Z=$(antoniovandre_eval_android "${TOKENINICIOEVAL}${TEMPZ}${TOKENFIMEVAL} + ${TOKENINICIOEVAL}${TRANSZ}${TOKENFIMEVAL}" "0" | tr -d "\n"); if [[ "${X}" =~ ^[+-]?[0-9]+([.][0-9]+)?$ ]] && [[ "${Y}" =~ ^[+-]?[0-9]+([.][0-9]+)?$ ]] && [[ "${Z}" =~ ^[+-]?[0-9]+([.][0-9]+)?$ ]]; then TEMP=$(antoniovandre_eval_android "${TOKENINICIOEVAL}${Z}${TOKENFIMEVAL} < ${TOKENINICIOEVAL}${MAXZ}${TOKENFIMEVAL}" "0" | tr -d "\n"); TEMP2=$(antoniovandre_eval_android "${TOKENINICIOEVAL}${Z}${TOKENFIMEVAL} > ${TOKENINICIOEVAL}${MINZ}${TOKENFIMEVAL}" "0" | tr -d "\n"); TEMP3=$(antoniovandre_eval_android "${Z}" "0" | tr -d "\n"); if [ "${TEMP}" == "${TEMP3}" ] && [ "${TEMP2}" == "${TEMP3}" ]; then

if [ $(antoniovandre_eval_android "${TOKENINICIOEVAL}${X}${TOKENFIMEVAL} > ${TOKENINICIOEVAL}${MAXIMOVALOR}${TOKENFIMEVAL}" "0") == $(antoniovandre_eval_android "${X}" "0") ]; then
MAXIMOVALOR=$X
fi

if [ $(antoniovandre_eval_android "${TOKENINICIOEVAL}${X}${TOKENFIMEVAL} < ${TOKENINICIOEVAL}${MINIMOVALOR}${TOKENFIMEVAL}" "0") == $(antoniovandre_eval_android "${X}" "0") ]; then
MINIMOVALOR=$X
fi

if [ $(antoniovandre_eval_android "${TOKENINICIOEVAL}${Y}${TOKENFIMEVAL} > ${TOKENINICIOEVAL}${MAXIMOVALOR}${TOKENFIMEVAL}" "0") == $(antoniovandre_eval_android "${Y}" "0") ]; then
MAXIMOVALOR=$Y
fi

if [ $(antoniovandre_eval_android "${TOKENINICIOEVAL}${Y}${TOKENFIMEVAL} < ${TOKENINICIOEVAL}${MINIMOVALOR}${TOKENFIMEVAL}" "0") == $(antoniovandre_eval_android "${Y}" "0") ]; then
MINIMOVALOR=$Y
fi

if [ $(antoniovandre_eval_android "${TOKENINICIOEVAL}${Z}${TOKENFIMEVAL} > ${TOKENINICIOEVAL}${MAXIMOVALOR}${TOKENFIMEVAL}" "0") == $(antoniovandre_eval_android "${Z}" "0") ]; then
MAXIMOVALOR=$Z
fi

if [ $(antoniovandre_eval_android "${TOKENINICIOEVAL}${Z}${TOKENFIMEVAL} < ${TOKENINICIOEVAL}${MINIMOVALOR}${TOKENFIMEVAL}" "0") == $(antoniovandre_eval_android "${Z}" "0") ]; then
MINIMOVALOR=$Z
fi

echo "${X} ${Y} ${Z}" >> "${ARQUIVODAT}"
fi; fi; fi

if [ $(antoniovandre_eval_android "${TOKENINICIOEVAL}${TOKENINICIOEVAL}${TOKENINICIOEVAL}${TOKENINICIOEVAL}${L}${TOKENFIMEVAL} - 1${TOKENFIMEVAL} * ${TOKENINICIOEVAL}${TOKENINICIOEVAL}${RESOLUCAO}${TOKENFIMEVAL}^2${TOKENFIMEVAL} + ${TOKENINICIOEVAL}${TOKENINICIOEVAL}${I}${TOKENFIMEVAL} - 1${TOKENFIMEVAL} * ${TOKENINICIOEVAL}${RESOLUCAO}${TOKENFIMEVAL}${TOKENFIMEVAL} + ${TOKENINICIOEVAL}${J}${TOKENFIMEVAL}${TOKENFIMEVAL} % ${TOKENINICIOEVAL}${STEP}${TOKENFIMEVAL}" "0" | tr -d "\n") == $(antoniovandre_eval_android "0" "0" | tr -d "\n") ] || [ $(antoniovandre_eval_android "${TOKENINICIOEVAL}${TOKENINICIOEVAL}${TOKENINICIOEVAL}${L}${TOKENFIMEVAL} - 1${TOKENFIMEVAL} * ${TOKENINICIOEVAL}${TOKENINICIOEVAL}${RESOLUCAO}${TOKENFIMEVAL}^2${TOKENFIMEVAL} + ${TOKENINICIOEVAL}${TOKENINICIOEVAL}${I}${TOKENFIMEVAL} - 1${TOKENFIMEVAL} * ${TOKENINICIOEVAL}${RESOLUCAO}${TOKENFIMEVAL}${TOKENFIMEVAL} + ${TOKENINICIOEVAL}${J}${TOKENFIMEVAL}" "0" | tr -d "\n") == $(antoniovandre_eval_android "${TOKENINICIOEVAL}${NUMEROFUNCOES}${TOKENFIMEVAL} * ${TOKENINICIOEVAL}${RESOLUCAO}${TOKENFIMEVAL}^2" "0" | tr -d "\n") ]; then PROGRESSRATIO=$(antoniovandre_eval_android "${TOKENINICIOEVAL}${TOKENINICIOEVAL}${TOKENINICIOEVAL}${TOKENINICIOEVAL}${L}${TOKENFIMEVAL} - 1${TOKENFIMEVAL} * ${TOKENINICIOEVAL}${TOKENINICIOEVAL}${RESOLUCAO}${TOKENFIMEVAL}^2${TOKENFIMEVAL} + ${TOKENINICIOEVAL}${TOKENINICIOEVAL}${I}${TOKENFIMEVAL} - 1${TOKENFIMEVAL} * ${TOKENINICIOEVAL}${RESOLUCAO}${TOKENFIMEVAL}${TOKENFIMEVAL} + ${TOKENINICIOEVAL}${J}${TOKENFIMEVAL}${TOKENFIMEVAL} / ${TOKENINICIOEVAL}${TOKENINICIOEVAL}${NUMEROFUNCOES}${TOKENFIMEVAL} * ${TOKENINICIOEVAL}${TOKENINICIOEVAL}${RESOLUCAO}${TOKENFIMEVAL}^2${TOKENFIMEVAL}${TOKENFIMEVAL}" "0" | tr -d "\n"); echo -ne "\r"; if [ "${BARRA}" == "1" ]; then echo -ne "["; for K in `seq 0 "${TAMBARRAPROGRESSO}"`; do BARRAPROGRESSO=$(antoniovandre_eval_android "${TOKENINICIOEVAL}${TAMBARRAPROGRESSO}${TOKENFIMEVAL} * ${TOKENINICIOEVAL}${PROGRESSRATIO}${TOKENFIMEVAL}" "0" | tr -d "\n"); if [ -z "${BARRAPROGRESSO%.*}" ]; then BARRAPROGRESSO="0"; fi; if [ "${K}" -le "${BARRAPROGRESSO%.*}" ]; then echo -ne "${AV_VERDE}${BARRAPROGRESSOCHAR1}${AV_SEMCOR}"; else echo -ne "${AV_CINZACLARO}${BARRAPROGRESSOCHAR0}${AV_SEMCOR}"; fi; done; echo -ne "] "; fi; PORCENTAGEM=$(antoniovandre_eval_android "100 * ${TOKENINICIOEVAL}${PROGRESSRATIO}${TOKENFIMEVAL}" "0" | tr -d "\n"); LC_NUMERIC="en_US.UTF-8" printf "%3.6f" "${PORCENTAGEM}" | tr -d "\n" ; echo -n "%"; case "${CHARPROGRESS}" in "") CHARPROGRESS="-";; "-") CHARPROGRESS="\\";; "\\") CHARPROGRESS="|";; "|") CHARPROGRESS="/";; "/") CHARPROGRESS="-";; *) ;; esac; echo -ne " ${CHARPROGRESS}"; fi
done
done
done

echo -e "\b${AV_VERDE}Ok${AV_SEMCOR}."; if hash tput &>> /dev/null; then tput cnorm; fi

rm ${DIRETORIOARQUIVOSGRAFICO}${PREFIXOARQUIVOSGRAFICO}*.png &>> /dev/null

TEMP2=""

for I in `seq 1 "${RESOLUCAOANGULO}"`; do
ANGULO=$(antoniovandre_eval_android "${TOKENINICIOEVAL}${I}${TOKENFIMEVAL} * 360 / ${TOKENINICIOEVAL}${RESOLUCAOANGULO}${TOKENFIMEVAL}" "0" | tr -d "\n")

echo -ne "Gerando gráfico ${I}... "; if [ "${GNUPLOTGDPNG}" != "" ]; then STR="set xtics font 'Monospace,12'; set ytics font 'Monospace,12'; set terminal png size 1080,1080; set size ratio -1; set output '${DIRETORIOARQUIVOSGRAFICO}${PREFIXOARQUIVOSGRAFICO}${I}.png'; set border 0; plot '${AVGCBACKGROUND}' binary filetype=png w rgbimage; set xzeroaxis lt 6 lw 2; set yzeroaxis lt 6 lw 2; set zzeroaxis lt 6 lw 2; set xtics ('' 0); set ytics ('' 0); set ztics ('' 0); set label sprintf (\"\n Gráfico cartesiano tridimensional.\n ${FUNCAOSINGULARPLURAL}: ${FUNCOES}.\") noenhanced font 'Monospace,12' at screen 0,1; set view equal xyz; set view 30, ${ANGULO}, 1; set xyplane at 0; splot [${MINIMOVALOR}:${MAXIMOVALOR}] [${MINIMOVALOR}:${MAXIMOVALOR}] [${MINIMOVALOR}:${MAXIMOVALOR}] '${ARQUIVODAT}' u 1:2:3 notitle with points pointtype 7 pointsize 0.3 lc 'black'"; else STR="set xtics font 'Monospace,12'; set ytics font 'Monospace,12'; set terminal png size 1080,1080; set size ratio -1; set output '${DIRETORIOARQUIVOSGRAFICO}${PREFIXOARQUIVOSGRAFICO}${I}.png'; set border 0; set xzeroaxis lt 6 lw 2; set yzeroaxis lt 6 lw 2; set zzeroaxis lt 6 lw 2; set xtics ('' 0); set ytics ('' 0); set ztics ('' 0); set label sprintf (\"\n Gráfico cartesiano tridimensional.\n ${FUNCAOSINGULARPLURAL}: ${FUNCOES}.\") noenhanced font 'Monospace,12' at screen 0,1; set view equal xyz; set view 30, ${ANGULO}, 1; set xyplane at 0; splot [${MINIMOVALOR}:${MAXIMOVALOR}] [${MINIMOVALOR}:${MAXIMOVALOR}] [${MINIMOVALOR}:${MAXIMOVALOR}] '${ARQUIVODAT}' u 1:2:3 notitle with points pointtype 7 pointsize 0.3 lc 'black'"; fi; if ! gnuplot -p -e "${STR}" &>> /dev/null; then echo -e "${AV_VERMELHO}Ocorreu um erro${AV_SEMCOR}."; exit 1; else echo -e "${AV_VERDE}Sucesso${AV_SEMCOR}."; fi

if [ "${I}" == "1" ]; then TEMP2="${DIRETORIOARQUIVOSGRAFICO}${PREFIXOARQUIVOSGRAFICO}${I}.png"; else TEMP2="${TEMP2} ${DIRETORIOARQUIVOSGRAFICO}${PREFIXOARQUIVOSGRAFICO}${I}.png"; fi
done

echo -ne "Gerando gif... "; TEMP=$(antoniovandre_eval_android "${TEMPOREFRESH} * 100" "0" | tr -d "\n"); if convert -resize "${ESCALA}%" `echo -n "${TEMP2}"` -set delay "${TEMP%.*}" -loop 0 `echo -n "${DIRETORIOARQUIVOSGRAFICO}${PREFIXOARQUIVOSGRAFICO}.gif"` &>> /dev/null; then echo -e "${AV_VERDE}Sucesso${AV_SEMCOR}."; else echo -e "${AV_VERMELHO}Ocorreu um erro${AV_SEMCOR}."; fi

echo -ne "Gerando mp4... "; if ffmpeg -y -hide_banner -loglevel panic -i `echo -n "${DIRETORIOARQUIVOSGRAFICO}${PREFIXOARQUIVOSGRAFICO}.gif"` -movflags faststart -pix_fmt yuv420p -vf "scale=trunc(iw/2)*2:trunc(ih/2)*2" `echo -n "${DIRETORIOARQUIVOSGRAFICO}${PREFIXOARQUIVOSGRAFICO}.mp4"` &>> /dev/null; then echo -e "${AV_VERDE}Sucesso${AV_SEMCOR}."; else echo -e "${AV_VERMELHO}Ocorreu um erro${AV_SEMCOR}."; fi

exit 0
